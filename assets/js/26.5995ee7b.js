(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{277:function(t,s,n){"use strict";n.r(s);var a=n(28),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"递归原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#递归原理"}},[t._v("#")]),t._v(" 递归原理")]),t._v(" "),n("blockquote",[n("p",[t._v("递归是一种解决问题的有效方法，在递归过程中，函数将自身作为子例程调")])]),t._v(" "),n("p",[t._v("你可能想知道如何实现调用自身的函数。诀窍在于，每当递归函数调用自身时，它都会将给定的问题拆解为子问题。递归调用继续进行，直到到子问题无需进一步递归就可以解决的地步。")]),t._v(" "),n("p",[t._v("为了确保递归函数不会导致无限循环，它应具有以下属性：")]),t._v(" "),n("ol",[n("li",[t._v("一个简单的 "),n("code",[t._v("基本案例（basic case）")]),t._v("（或一些案例） —— 能够不使用递归来产生答案的终止方案。")]),t._v(" "),n("li",[t._v("一组规则，也称作 "),n("code",[t._v("递推关系（recurrence relation）")]),t._v("，可将所有其他情况拆分到基本案例。")])]),t._v(" "),n("p",[t._v("注意，函数可能会有多个位置进行自我调用。")]),t._v(" "),n("h4",{attrs:{id:"示例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[t._v("#")]),t._v(" 示例")]),t._v(" "),n("p",[t._v("让我们从一个简单的编程问题开始：")]),t._v(" "),n("blockquote",[n("p",[t._v("以相反的顺序打印字符串。")])]),t._v(" "),n("p",[t._v("你可以使用迭代的办法轻而易举地解决这个问题，即从字符串的最后一个字符开始遍历字符串。但是如何递归地解决它呢？")]),t._v(" "),n("p",[t._v("首先，我们可以将所需的函数定义为 "),n("code",[t._v("printReverse(str[0...n-1])")]),t._v("，其中 "),n("code",[t._v("str[0]")]),t._v(" 表示字符串中的第一个字符。然后我们可以分两步完成给定的任务：")]),t._v(" "),n("ol",[n("li",[n("code",[t._v("printReverse(str[1...n-1])")]),t._v("：以相反的顺序打印子字符串 "),n("code",[t._v("str[1...n-1]")]),t._v("。")]),t._v(" "),n("li",[n("code",[t._v("print(str[0])")]),t._v("：打印字符串中的第一个字符。")])]),t._v(" "),n("p",[t._v("请注意，我们在第一步中调用函数本身，根据定义，它使函数递归。")]),t._v(" "),n("p",[t._v("下面给出了代码片段：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("printReverse")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("str")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("helper")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" str"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("helper")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("index"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" str")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" str"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("helper")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" str"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("index"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("接下来，你将会发现一个与上述示例稍有不同的练习。你应该尝试使用递归来解决它。")]),t._v(" "),n("p",[n("em",[t._v("注意")]),t._v("：对于本练习中，我们还在本 “探索” 章节中提供了详细的解决方案。")])])}),[],!1,null,null,null);s.default=e.exports}}]);